#!/usr/bin/env node


import app from '../app'
import http from 'http'

const io = require('socket.io')(http)

import {Observable} from '@reactivex/rxjs'

import {observableFromFeed} from '../feedClient/client'

import {tick$, tearDown$} from '../ticker'
import blockchainFeed from '../feeds/blockchain/blockchain.feed'
import bitcoinchartsFeed from '../feeds/bitcoincharts/bitcoincharts.feed'
import coindeskFeed from '../feeds/coindesk/coindesk.feed'
import {onConnection} from '../communication'

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const websocket = io.listen(server)

/**
 * Here defining all feeds
 */

const blockchain$ = observableFromFeed(blockchainFeed)
const coindesk$ = observableFromFeed(coindeskFeed)
const bitcoinchart$ = observableFromFeed(bitcoinchartsFeed)

const feeds = [blockchain$, coindesk$, bitcoinchart$]

/**
 * Let's merge all feeds streams to one with a help of a bufferCount.
 * So n feeds will produce one [] value after all completed
 */
const request$ = Observable.merge(...feeds)
    .bufferCount(feeds.length)

/**
 * Merging with some initial trigger to produce first value at once
 * On every tick value we will take our requests to go for actual data
 */
const stream$ = Observable.merge(tick$, Observable.timer(100))
    .flatMap(() => request$)
    .publishReplay(5)
    .refCount()

websocket.on('connection', onConnection(stream$))

/**
 * Express boilerplate stuff
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {

}
